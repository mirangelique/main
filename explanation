Лабораторная работа 3
Задание 1 (Анализ взаимосвязи между характеристиками рака и населением)

•  Цель: Выявить и визуализировать взаимосвязь между уровнем заболеваемости раком, численностью населения и категорией населения (малое, среднее, большое) в наборе данных о раке.

•  Задачи:
  1. Загрузить и подготовить набор данных о раке.
  2. Разделить значения численности населения на три категории: "малые", "средние" и "большие".
  3. Визуализировать данные с помощью диаграммы рассеяния, чтобы исследовать взаимосвязь между заболеваемостью раком, численностью населения и категорией населения.

•  Инструменты:
  •  Python
  •  statsmodels: Загрузка набора данных.
  •  pandas: Работа с данными (DataFrame), категоризация данных с помощью pd.cut().
  •  seaborn: Создание диаграммы рассеяния (sns.scatterplot()).
  •  matplotlib: Настройка графика (заголовки, метки осей).

•  Алгоритмы:
  1. Загрузка данных: Использование sm.datasets.cancer.load_pandas() для загрузки данных.
  2. Категоризация данных:
    *  Определение границ категорий на основе квантилей численности населения (df['population'].quantile()).
    *  Использование pd.cut() для отнесения каждого значения численности населения к одной из категорий ("малые", "средние", "большие").
  3. Визуализация данных: Использование sns.scatterplot() для создания диаграммы рассеяния.

•  Выводы: 
  • Предварительный анализ данных показывает положительную связь между заболеваемостью раком и численностью населения. Большие популяции характеризуются более широким диапазоном значений обоих показателей, а малые и средние популяции в основном сосредоточены в областях с низкой заболеваемостью раком и численностью населения. 


Задание 2 (Анализ изменения уровня CO2 во времени)

•  Цель: Визуализировать изменение уровня CO2 в атмосфере в течение заданного временного промежутка (1958-1980) и проанализировать динамику этого изменения.

•  Задачи:
  1. Загрузить набор данных об уровне CO2.
  2. Преобразовать индекс (даты) в столбец для удобства фильтрации.
  3. Выбрать данные за определенный период (1958-1980).
  4. Создать график, показывающий изменение уровня CO2 во времени.
  5. Проанализировать график для выявления трендов (увеличение, уменьшение, стабильность).

•  Инструменты:
  •  Python
  •  statsmodels: Загрузка набора данных.
  •  pandas: Работа с данными (DataFrame), фильтрация данных, преобразование индекса.
  •  matplotlib: Создание графика (plt.plot()), настройка графика.

•  Алгоритмы:
  1. Загрузка данных: Использование sm.datasets.co2.load_pandas() для загрузки данных.
  2. Преобразование данных:
    *  Преобразование DatetimeIndex в столбец 'date' и установка его в качестве индекса.
    *  Создание столбца 'year' для удобной фильтрации по годам.
  3. Фильтрация данных: Выбор данных за заданный временной промежуток (1958-1980).
  4. Визуализация данных: Использование plt.plot() для создания графика изменения уровня CO2 во времени.

•  Выводы:
  • Наблюдается выраженный и устойчивый рост уровня CO2 в атмосфере на протяжении всего рассматриваемого периода. Линия графика имеет явно выраженный восходящий наклон, что свидетельствует о систематическом увеличении концентрации CO2.
Пояснение кода 
Задание 1 (Анализ взаимосвязи между характеристиками рака и населением)

1. data = sm.datasets.cancer.load_pandas(): Загружает набор данных о раке (breast cancer) из библиотеки statsmodels. load_pandas() возвращает объект, содержащий данные.
2. df = data.data: Извлекает данные из загруженного объекта data и сохраняет их в pandas DataFrame под именем df.
3. population_bins = [...]: Создает список population_bins, который определяет границы для категоризации численности населения. Каждое значение в списке представляет границу категории.
  •  df['population'].min() - 1: Минимальное значение в столбце 'population' (минус 1, чтобы включить самое маленькое значение в первую категорию).
  •  df['population'].quantile(0.33): 33-й процентиль значений в столбце 'population'. Это значение, ниже которого лежит 33% данных.
  •  df['population'].quantile(0.66): 66-й процентиль значений в столбце 'population'.
  •  df['population'].max() + 1: Максимальное значение в столбце 'population' (плюс 1, чтобы включить самое большое значение в последнюю категорию).
4. population_labels = ['малые', 'средние', 'большие']: Создает список population_labels, содержащий метки для каждой категории населения.
5. df['категория популяций'] = pd.cut(...): Создает новый столбец с именем 'категория популяций' в DataFrame df. Функция pd.cut() используется для разделения значений в столбце 'population' на категории на основе заданных границ и присвоения каждой категории соответствующей метки.
  •  df['population']: Столбец DataFrame, который нужно категоризовать.
  •  bins=population_bins: Границы категорий.
  •  labels=population_labels: Метки категорий.
  •  include_lowest=True: Включает нижнюю границу интервала.
6. sns.scatterplot(...): Создает диаграмму рассеяния (scatter plot) с использованием seaborn.
  •  x='cancer': Использует столбец 'cancer' для оси X.
  •  y='population': Использует столбец 'population' для оси Y.
  •  hue='категория популяций': Раскрашивает точки на графике в разные цвета в зависимости от категории населения. Это позволяет визуально отличать разные группы населения.
  •  data=df: Указывает, что данные для графика находятся в DataFrame df.
7. plt.title(...), plt.xlabel(...), plt.ylabel(...): Устанавливают заголовок и метки осей для графика.
8. plt.show(): Отображает график.

Задание 2 (Анализ уровня CO2):

1.  dn = 'co2':  Присваивает строковое значение 'co2' переменной dn
2.  start = 1958: Устанавливает начальный год для анализа.
3.  end = 1980: Устанавливает конечный год для анализа.
4.  data = sm.datasets.co2.load_pandas():  Загружает набор данных об уровне CO2 из библиотеки statsmodels.
5.  df = data.data:  Извлекает данные в DataFrame df.  Важно: в этом наборе данных даты изначально находятся в индексе DataFrame.
6.  df['date'] = df.index.to_series(): Создает новую колонку date в DataFrame. В качестве значений для этой колонки берутся значения из индекса (df.index), которые представляют собой даты.  Метод .to_series() преобразует DatetimeIndex в Series.
7.  df = df.set_index('date'): Устанавливает колонку date в качестве индекса DataFrame. Это необходимо, чтобы можно было фильтровать данные по дате.
8.  df['year'] = df.index.year: Создает новую колонку year в DataFrame, содержащую год, извлеченный из индекса (даты).
9.  df = df[(df['year'] >= start) & (df['year'] <= end)]: Фильтрует DataFrame, выбирая только те строки, где год находится между start и end включительно.
10. plt.figure(figsize=(12, 6)): Создает новую фигуру для графика и задает ее размер в дюймах (ширина 12, высота 6).
11. plt.plot(df['co2'], label='CO2 уровень'): Создает график, отображающий уровень CO2 (столбец 'co2' DataFrame).  label='CO2 уровень' задает метку для легенды.
12. plt.xlabel('Дата'), plt.ylabel('Уровень CO2'): Устанавливают подписи для осей X и Y.
13. plt.title(f'Уровень CO2 ({start}-{end})'): Устанавливает заголовок для графика, используя f-строку для вставки значений start и end в заголовок.
14. plt.legend(): Отображает легенду графика (если она есть).
15. plt.grid(True): Включает отображение сетки на графике.
16. plt.show(): Отображает график.
